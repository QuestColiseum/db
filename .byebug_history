c
skill.reload.target
skill.target
skill.target == :summon
skill
targets
c
initial_char
trigger_char
c
trigger_char
trigger_car
char
c
trigger
c
first_prio_trigger = (friendly_triggers + enemy_triggers).sort { |a, b| a.combined_speed <=> b.combined_speed }.first
first_prio_trigger = (friendly_triggers + enemy_triggers).sort { |a, b| a.combined_speed <=> b.combined_speed }
first_prio_trigger = (friendly_triggers + enemy_triggers).sort { |a, b| a.combined_speed > b.combined_speed }
(friendly_triggers + enemy_triggers).first.combined_speed
(friendly_triggers + enemy_triggers).first_combined_speed
(friendly_triggers + enemy_triggers).length
(friendly_triggers + enemy_triggers)
c
battle_team_two == battle_team_one ? true : false
battle_team == battle_team_one ? true : false
battle_team == battle_team_one ? battle_team_one : battle_team_two
battle_team == battle_team_two
battle_team == battle_team_Two
battle_team == opposite_team(battle_team)
battle_team
c
battle_team == opposite_team(battle_team)
battle_team = opposite_team(battle_team)
battle_team
battle_team.battle_team_characters
battle_team
opposite_team(battle_team).battle_team_characters
c
btc.reload
btc
c
btc
c
btc
c
btc
c
enemy_triggers = opposite_team(battle_team).battle_team_characters.select {|btc| btc.has_a_skill && btc.team_character.character.skill.enemy_auto_trigger == true && btc.has_full_mana == true}
c
enemy_triggers = opposite_team(battle_team).battle_team_characters.select {|btc| btc.team_character.character.skill.enemy_auto_trigger == true && btc.has_full_mana == true}
opposite_team(battle_team).battle_team_characters.where(:has_full_mana => true).count
opposite_team(battle_team).battle_team_characters.where(:has_full_mana => true)
enemy_triggers = opposite_team(battle_team).battle_team_characters.where(:has_full_mana => true).select {|btc| btc.team_character.character.skill.enemy_auto_trigger == true}
battle_team == battle_team_one
friendly_triggers = battle_team.battle_team_characters.where(:has_full_mana => true).select {|btc| btc.team_character.character.friendly_auto_trigger == true}
c
self.battle.reload.battle_team_characters
c
self.battle.reload.battle_team_characters
self.battle.battle_team_characters
self.battle.battle_characters
c
decode_targets
c
skill.reload.target
skill.target
skill
skill.target.target
skill.target
skill
decode_targets
c
turn.battle.reload.battle_team_characters.each {|d| puts d.is_poisoned}
turn.battle.reload.turns.length
turn.battle.reload.turns
turn.battle.reload.battle_team_characters.each {|d| puts d.health}
turn.battle.battle_team_characters.each {|d| puts d.health}
turn.battle.battle_team_characters
turn
c
Move.create!(:move_stack => self, :battle_team_character => char, :skill => char.team_character.character.skill, :status => char.team_character.character.skill.type)
char.team_character.character.skill.type
char.team_character.character.skill
char
self
c
self.reload.battle_team_characters.each {|d| puts d.health}
self.reload.battle_team_characters.each {|d| puts d.is_poisoned}
self.reload.battle_team_characters.each {|d| puts d}
c
self.reload.battle_team_characters.each {|d| puts d.health}
self.battle_team_characters.each {|d| puts d.health}
self.battle_team_characters
c
self.reload.battle_team_characters.each {|c| puts c.health}
c
self.reload.battle_team_characters.each {|c| puts c.health}
self.reload.battle_team_characters.each {|c| puts p.health}
self.reload.battle_team_characters
battle.reload.battle_team_characters
c
self.reload.turns
self.reload.battle_team_characters
battle_team_characters.reload
battle_team_characters
battle_characters
c
self.battle.reload.battle_team_characters
self.battle.battle_team_characters
self.battle.battle_characters
self.battle
c
self.battle_team_character
self.battle_team_character.health
c
self.effect_stack.move.move_stack.turn.battle.one_team_is_defeated
self.effect_stack.move.move_stack
self.effect_stack.move.turn
self.effect_stack.move
self.effect_stack.turn
self.effect_stack
self.battle_team_character
self.battle_team_character.battle.one_team_is_defeated
battle.one_team_is_defeated
self.own_team._id
c
choose_enemy_target
self.own_team._id
self.own_team._i
self.own_team
c
self.battle.reload.battle_team_characters
self.battle.battle_team_characters
c
self.effect_stack.move.battle_team_character.attack
self.battle_team_character.health
self.battle_team_character
c
self.battle_team_character.save!
self.battle_team_character.health
c
self.battle.battle_team_characters
c
self.battle.battle_team_characters
self.battle
self
c
self.move_stack
self.battle.battle_teams.first.battle_team_characters
self.battle.battle_teams.first.battle_characters
self.battle.battle_teams
c
own_team.battle_team_characters.length
own_team.battle.battle_teams.where(:id.ne => own_team._id).first.battle_team_characters.length
own_team.battle.battle_teams.where(:id.ne => own_team._id).first.battle_team_characters
own_team.battle.battle_teams.where(:id.ne => own_team._id).first.battle_characters
own_team.battle.battle_teams.where(:id.ne => own_team._id).first
enemy_team
own_team
c
self.effect_stack.move.battle_team_character
self.effect_stack.move
self.effect_Stack.move
self
c
b
self.battle_teams.where(:team => self.team_one).first
self.battle_teams.where(:team => self.team_one)
self.battle_teams
c
self
c
self.id
c
self.gambits.length
self.has_no_gambits_remaining
c
self.scenario.has_gambits_remaining
self.scenario
c
Character.find_by(:chracter_id => params[:character_id].to_i)
Character.find_by(:chracter_id => params[:character_id])
params[:character_id]
object
object.character
object
object = crud_class.create(:scenario => Scenario.find(params[:scenario_id]), :character => Character.find_by(:chracter_id => params[:character_id]), :status => params[:status].to_sym)
    )
      :status => params[:status].to_sym
      :character => Character.find_by(:chracter_id => params[:character_id]),
      :scenario => Scenario.find(params[:scenario_id]),
object = crud_class.create(
Character.find_by(:character_id => params[:character_id])
Character.find_by(character_id => params[:character_id])
c
tc.save!
tc
c
self.character
self.scenario.quest_level.quest.party.team
c
params.scenario_id
params
c
params
crud_class
c
crud_class
params
c
object.party_ids
object.party
object
c
